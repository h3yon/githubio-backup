I"g+<h3 id="til-스프링-입문---코드로-배우는-스프링-부트-웹-mvc-db-접근-기술">[TIL] 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술</h3>

<p>(주의) 주관적으로 정리하고 싶은 부분만 정리했습니다!<br />
 요약본을 보고 싶으신 분은 다른 게시글을 보시는 걸 추천합니다~!</p>

<p>본 강의:
<a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9E%85%EB%AC%B8-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/dashboard">인프런 - 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술</a></p>

<ol>
  <li>
    <p>객체를 계속 생성하는 것보다는<br />
의존성 주입으로 재활용할 부분은 재활용하기</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

<span class="kd">public</span> <span class="nf">MemberService</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">memberRepository</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>스프링 컨테이너</p>
  </li>
</ol>

<p>스프링이 관리하게 되면<br />
스프링 컨테이너에 등록하고 받아서 쓰도록 관리<br />
new해서 사용하면 다른 컨트롤러로 하면<br />
다른 컨트롤러에서 가져다 쓸 때 객체를 new.</p>

<p>하나로 하고 재활용해서 쓰면 됨.</p>

<ol>
  <li>Autowired</li>
</ol>

<p>스프링 컨테이너가 뜰 때 컨트롤러 생성함.<br />
그럼 아래 생성자 호출.<br />
Autowired가 붙어있으면 멤버 서비스를 가져다가 연결시켜줌<br />
-&gt; 의존관계 주입</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">MemberController</span><span class="o">(</span><span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>스프링 빈을 등록하는 2가지 방법</li>
</ol>

<ul>
  <li>
    <p>컴포넌트 스캔과 자동 의존관계 설정</p>

    <ul>
      <li>
        <dl>
          <dt>컴포넌트 스캔!</dt>
          <dd><code class="language-plaintext highlighter-rouge">@Component</code> 또는 <code class="language-plaintext highlighter-rouge">@Controller/Service/Repository</code>로 객체를 생성해서 스프링 컨테이너에 등록함</dd>
          <dd>위의 어노테이션을 통해 <code class="language-plaintext highlighter-rouge">스프링 빈</code>으로 자동 등록</dd>
        </dl>
      </li>
      <li>
        <dl>
          <dt>Autowired</dt>
          <dd>컨트롤러, 서비스, 레퍼지토리 연관관계를 설정해줘서 서로 쓸 수 있게 함.</dd>
        </dl>
      </li>
    </ul>

    <blockquote>
      <p>참고: 스프링은 스프링 컨테이너에 스프링 빈을 등록할 때, 기본으로 싱글톤으로 등록.(유일하게 하나만 등록해서 공유)<br />
따라서 스프링 빈이면 모두 같은 인스턴스!</p>
    </blockquote>
  </li>
  <li>
    <dl>
      <dt>자바 코드로 직접 스프링 빈 등록</dt>
      <dd>
        <p>정형화되지 않거나, <code class="language-plaintext highlighter-rouge">상황에 따라 구현 클래스를 변경</code>해야될 경우 사용<br />
ex) 레퍼지토리를 다른 레퍼지토리로 바꿀건데,<br />
기존의 운영코드를 !하나도! 손대지 않고 바꿔치기 할 때</p>
      </dd>
    </dl>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">memberService</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MemberService</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository</span><span class="o">(){</span>
        <span class="c1">// 구현체 리턴</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MemoryMemberRepository</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<ol>
  <li>의존성 주입(DI) 3가지 방법</li>
</ol>

<p>아래 3가지 예시로 살펴보자.<br />
참고로 셋다 같은 의미를 가진다.</p>

<ul>
  <li>
    <p>필드 주입</p>

    <p>간결한데, 중간에 바꿀 방법이 없다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>setter 주입</p>

    <p>public으로 되어있고,<br />
중간에 잘못 바꾸면 문제될 수 O</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMemberService</span><span class="o">(</span><span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">){</span>
      <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>생성자 주입(권장됨!!)</p>

    <p>의존관계가 동적으로 변하는 경우가 거의 없어서 권장됨</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">MemberService</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberRepository</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<blockquote>
  <p>주의: <code class="language-plaintext highlighter-rouge">Autowired</code>를 통한 DI는 스프링이 관리하는 객체에서만 관리된다.
스프링 빈으롣 등록하지 않고 내가 직접 생성한 객체에서는 동작되지 않는다.</p>
</blockquote>

<ol>
  <li>개방-폐쇄 법칙(OCP, Open-Closed Principle)</li>
</ol>

<p>확장에는 열려있고, 수정/변경에는 닫혀있다.</p>

<ol>
  <li>AOP</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Aspect</span> <span class="c1">// AOP!</span>
<span class="nd">@Component</span> <span class="c1">//config에 bean해도 되고 Component로 해도 되고</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TimeTraceAop</span> <span class="o">{</span>

    <span class="nd">@Around</span><span class="o">(</span><span class="s">"execution(* hello.hellospring..*(..))"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">execute</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span><span class="o">{</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="kt">long</span> <span class="n">finish</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
            <span class="kt">long</span> <span class="n">timeMs</span> <span class="o">=</span> <span class="n">finish</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"END: "</span> <span class="o">+</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">timeMs</span> <span class="o">+</span> <span class="s">"ms"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET