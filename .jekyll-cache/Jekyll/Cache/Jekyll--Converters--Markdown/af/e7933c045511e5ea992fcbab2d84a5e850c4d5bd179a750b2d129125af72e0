I"J<h1 id="스프링-핵심-원리---기본편-복습일지3-컴포넌트-스캔">[스프링 핵심 원리 - 기본편] 복습일지3 (컴포넌트 스캔)</h1>

<h2 id="컴포넌트-스캔">컴포넌트 스캔?</h2>

<p>컴포넌트 스캔은 스프링이 설정 정보가 없어도<br />
<code class="language-plaintext highlighter-rouge">자동으로 스프링 빈을 등록</code>하는 기능이다</p>

<p>컴포넌트 스캔을 사용하려면 아래처럼<br />
<code class="language-plaintext highlighter-rouge">@ComponentScan</code>을 설정 정보에 붙여준다.<br />
아래처럼 제외도 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span><span class="o">(</span>
        <span class="n">excludeFilters</span> <span class="o">=</span> <span class="nd">@ComponentScan</span><span class="o">.</span><span class="na">Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span> <span class="n">classes</span> <span class="o">=</span> <span class="nc">Configuration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AutoAppConfig</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>컴포넌트 스캔은 <code class="language-plaintext highlighter-rouge">@Component</code> 애노테이션이 붙은 클래스를 스캔 후<br />
스프링 빈으로 등록한다.</p>

<p>예시를 한번 봐보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. DetailPolicy.class</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DetailPolicyRepository</span> <span class="kd">implements</span> <span class="nc">PolicyRepository</span><span class="o">{}</span>

<span class="c1">// 2. PolicyServiceImpl.class</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PolicyServiceImpl</span> <span class="kd">implements</span> <span class="nc">PolicyService</span><span class="o">{</span>

  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">PolicyRepository</span> <span class="n">policyRepository</span><span class="o">;</span>

  <span class="nd">@Autowired</span>
  <span class="kd">public</span> <span class="nf">PolicyServiceImpl</span><span class="o">(</span><span class="nc">PolicyRepository</span> <span class="n">policyRepository</span><span class="o">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">policyRepository</span> <span class="o">=</span> <span class="n">policyRepository</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Bean</code>으로 설정 정보 작성, 의존 관계도 명시했었는데,<br />
이런 설정 정보가 없어서 이 클래스 안에서 DI를 해결해야 한다.<br />
<code class="language-plaintext highlighter-rouge">@Autowired</code>로 의존관계를 자동 주입해준다.</p>

<p>이 부분을 사용할 때엔,<br />
Bean을 사용했을 때처럼 ApplicationContext, getBean을 사용하면 된다.</p>

<h2 id="컴포넌트-스캔의-동작">컴포넌트 스캔의 동작</h2>

<p><code class="language-plaintext highlighter-rouge">ComponentScan</code>은 <code class="language-plaintext highlighter-rouge">Component</code>가 붙은 모든 클래스를 스프링 빈으로 등록한다.<br />
빈 이름은 클래스 맨앞글자가 소문자로 바뀐 걸로 지정된다.<br />
만약 직접 지정하고 싶으면 @Component(“원하는 이름”)으로 진행하면 된다.</p>

<p>그렇다면 <code class="language-plaintext highlighter-rouge">Autowired</code>는 어떤 동작을 할까?<br />
생성자에 Autowired를 지정하면,
스프링 컨테이너가 자동으로 <code class="language-plaintext highlighter-rouge">스프링 빈을 찾아서 주입</code>한다.</p>

<h2 id="컴포넌트-스캔-탐색-위치">컴포넌트 스캔 탐색 위치</h2>

<p>컴포넌트 스캔은 컴포넌트가 붙은 모든 클래스를 스프링 빈으로 등록한다고 했는데,<br />
다 스캔하면 시간이 오래 걸려서, 꼭 필요한 위치부터 탐색한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ComponentScan</span><span class="o">(</span>
          <span class="n">basePackages</span> <span class="o">=</span> <span class="s">"패키지명.원하는_위치"</span><span class="o">,</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 원하는 탐색 시작 위치를 지정할 수 있다.</p>

<h2 id="컴포넌트-스캔-기본-대상">컴포넌트 스캔 기본 대상</h2>

<p>컴포넌트를 찾아서 등록하기도 하지만,<br />
<code class="language-plaintext highlighter-rouge">@Controller</code>, <code class="language-plaintext highlighter-rouge">@Service</code>, <code class="language-plaintext highlighter-rouge">@Repository</code>, <code class="language-plaintext highlighter-rouge">@Configurtation</code>도<br />
대상에 포함된다.</p>

<p>스캔 대상을 추가/제외도 가능하다.<br />
그럴 땐 ComponentScan어노테이션에<br />
<code class="language-plaintext highlighter-rouge">includeFilters</code>, <code class="language-plaintext highlighter-rouge">excludeFilters</code>를 사용하면 된다.</p>

<h2 id="나만의-컴포넌트-대상-어노테이션-만들기">나만의 컴포넌트 대상 어노테이션 만들기</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span> <span class="c1">// class</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Documented</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">MyExcludeComponent</span> <span class="o">{</span>
<span class="o">}</span>

<span class="c1">// 사용할 때 다른 클래스에서의 ComponentScan</span>
<span class="nd">@ComponentScan</span><span class="o">(</span>
    <span class="n">excludeFilters</span> <span class="o">=</span> <span class="nd">@ComponentScan</span><span class="o">.</span><span class="na">Filter</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">FilterType</span><span class="o">.</span><span class="na">ANNOTATION</span><span class="o">,</span> <span class="n">classes</span> <span class="o">=</span> <span class="nc">MyExcludeComponent</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
  <span class="o">)</span>
</code></pre></div></div>

<p>필터 타입의 경우,<br />
어노테이션 외에도 정규표현식, CUSTOM 등이 있다.</p>

:ET