---
layout: post
title: [JAVA#1 ORM과 JPA, REST API]
date: 2021-06-05 21:50:55 +0300
image: /assets/images/blog/post-2.jpg
author: uixgeek
tags: UX design
---

<h2>ORM(Object-relational mapping) 이란</h2>

- Object-Relational Mapping (객체 관계 매핑)
- 객체는 객체대로 설계하고, 관계형 데이터베이스는 관계형 데이터베이스대로 설계한다.
- ORM 프레임워크가 중간에서 매핑해준다.
- 대중적인 언어에는 대부분 ORM 기술이 존재한다.
- ORM은 객체와 RDB 두 기둥 위에 있는 기술 이다.

<h2>JPA(Java Persistence API)란?</h2>

- EJB: 과거의 자바 표준(Entity Bean)
- 과거의 ORM → 코드가 매우 지저분하다. API 복잡성이 높고 속도가 느리다
- Hibernate: ORM 프레임워크. Open Source SW
- JPA: 자바 진영의 ORM 기술 표준으로 인터페이스의 모음
  → JPA 인터페이스를 구현한 대표적인 오픈소스가 Hibernate라고 할 수 있다.
- JPA의 동작 과정: JPA는 애플리케이션과 JDBC 사이에서 동작
  → JDBC API를 사용하여 SQL을 호출하여 DB와 통신
  → 개발자가 직접 JDBC API를 쓰는 것이 아님

<h2>오늘의 어노테이션 예제 코드</h2>

```java
@RestController
/*
@RestController:
@Controller 어노테이션과 @ResponseBody 어노테이션을 합쳐놓은
어노테이션으로 클래스 상단에 @RestController 어노테이션을 선언하면 메서드마다
@ResponseBody를 붙여주지 않아도 된다.
*/

@RequestMapping("/api"); //URL을 컨트롤러의 메서드와 매핑할 때 사용하는 스프링 어노테이션

public class GetController{
/* method는 어떠한 타입으로 받을 것인지, path로 받을 주소 지정 */

	@RequestMapping(method = RequestMethod.GET, path = "/getMethod")
	//localhost:8080/api/getMethod
	public String getRequest(){
		return "hi getMethod";
	}

    /* 파라미터가 별로 없을 때 */
	@GetMapping("/getParameter") //getMapping으로 Paramerter를 받아준다.
	public String getParam(@RequestParam String id, @RequestParam String password){
		return id+password;
	}

    /* 파라미터가 많을 때 */
    @Getmapping("/getParameter")
    public String getParam(
        @RequestParam String id,
        @RequestParam String email,
        @RequestParam String Address,
        @RequestParam String name,
        @RequestParam String id,
        @RequestParam String password,
        ){
        return id+password;
    }

	@PostMapping(value = "/postMethod")
	public SearchParam postMethod(SearchParam searchparam){
		return "searchParam";
	}

	// PUT/PATCH/DELETE
}
```

@RestController: @Controller 어노테이션과 @ResponseBody 어노테이션을 합쳐놓은 어노테이션으로 클래스 상단에 @RestController 어노테이션을 선언하면 메서드마다 @ResponseBody를 붙여주지 않아도 된다.

@RequestMapping("/api"); //URL을 컨트롤러의 메서드와 매핑할 때 사용하는 스프링 어노테이션

@GetMapping("/getParameter") //getMapping으로 Paramerter를 받아준다.

<h2>Model(Model of MVC)</h2>
:컨트롤러를 설치한 경로에 model이라는 패키지를 생성하고 SearchParam이라는 클래스 생성

```java
//SearchParam.java
public class SearchParam{
	private String email;
	private String address;
	private String name;
	private String id;
	private String password;

	public String getEmail(){
		return email;
	}

	public void setEmail(String email){
		this.email = email;
	}
	...
}
```

controller로 돌아와서 @RequestParam 어노테이션으로 매핑하는 게 아니라 객체 형식으로 매핑 시켜줌

```java
@GetMapping("/getMultParam")
public String getMulP(SearchParam searchparam){
	return "ok";
}

// 스프링은 리턴값을 객체로 주면 된다.
@GetMapping("/getMultParam")
public SearchParam getMulP(SearchParam searchparam){
	return searchParam;
}
```

출처: http://wonit.tistory.com/37?category=738059
